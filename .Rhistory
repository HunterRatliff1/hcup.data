#### READ FILES ####
# Read the zip file and extract files
d <- tempdir()
# Read the files
archive::archive_extract(data_url,
dir  = d,
files = c("DXCCSR_v2022-1.CSV",
"DXCCSR-Reference-File-v2022-1.xlsx"))
df_mapping <- readr::read_csv(file = glue::glue("{d}/DXCCSR_v2022-1.CSV"),
col_types = "cccccccccccccccccc")
df_categories <- readxl::read_excel(glue::glue("{d}/DXCCSR-Reference-File-v2022-1.xlsx"),
sheet = "CCSR_Categories",
col_names = c("CCSR", "CCSR_desc"),
skip = 2)
df_chapters <- readxl::read_excel(glue::glue("{d}/DXCCSR-Reference-File-v2022-1.xlsx"),
sheet = "Naming_Conventions",
col_names = c("I10DX_Chapter", "First3"),
skip = 2)
unlink(d) # remove temp directory
rm(d)
#### REFORMAT ####
# Rename the columns
names(df_mapping) <- c("I10DX_code",      "I10DX_text",
"default_CCSR_IP", "default_CCSR_IP_desc",
"default_CCSR_OP", "default_CCSR_OP_desc",
glue::glue("CCSR{rep(1:6, each=2)}{rep(c('', '_desc'), 6)}"))
CCSR_DX_mapping <- df_mapping %>%
# Remove the extra quotations
mutate(across(everything(), str_remove_all, "'")) %>%
mutate(across(everything(), na_if, " ")) %>%
# Drop extra columns, as we don't need them
select(-ends_with("_desc")) %>%
rename(I10_DX=I10DX_code)
# Join the ICD chapter to the category definitions
CCSR_DX_categories <- df_categories %>%
mutate(First3 = str_extract(CCSR, "^\\w\\w\\w")) %>%
left_join(df_chapters, by = "First3")
rm(df_mapping, df_chapters, df_categories)
# ####   WRITE TO FILE   ####
# ####  ~ Write to CSV   ####
readr::write_csv(CCSR_DX_mapping,    "data-raw/CCSR/CCSR_DX_mapping.csv")
readr::write_csv(CCSR_DX_categories, "data-raw/CCSR/CCSR_DX_categories.csv")
rm(CCSR_DX_mapping, CCSR_DX_categories)
read_csv("data-raw/CCSR/CCSR_DX_mapping.csv")
read_csv("data-raw/CCSR/CCSR_DX_mapping.csv", col_types = "cccccccccc")
read_csv("data-raw/CCSR/CCSR_DX_categories.csv")
read_csv("data-raw/CCSR/CCSR_DX_categories.csv", col_types = "cccc")
# #### ~ Write to object ####
CCSR_DX_mapping     <- read_csv("data-raw/CCSR/CCSR_DX_mapping.csv", col_types = "cccccccccc")
CCSR_DX_categories  <- read_csv("data-raw/CCSR/CCSR_DX_categories.csv", col_types = "cccc")
usethis::use_data(CCSR_DX_mapping)
usethis::use_data(CCSR_DX_categories)
rm(CCSR_DX_categories) # We'll use CCSR_DX_mapping below
####    ~ Metadata     ####
# Update metadata
metadata <- jsonlite::read_json("data-raw/metadata.json", simplifyVector = T)
list(
help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/ccsr/dxccsr.jsp",
data_url = data_url,
version  = "CCSR v2022.1",
download_date = Sys.Date()
)
metadata[["CCSR_DX"]] <- list(
help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/ccsr/dxccsr.jsp",
data_url = data_url,
version  = "CCSR v2022.1",
download_date = Sys.Date()
)
metadata %>% jsonlite::write_json("data-raw/metadata.json")
rm(metadata, data_url)
#### SPECIAL FORMAT ####
# Make CCSR long format
CCSR_DX_tidy <- CCSR_DX_mapping %>%
select(I10_DX, starts_with("CCSR")) %>%
pivot_longer(!I10_DX, names_to="CCSR_n", values_to="CCSR") %>%
filter(!is.na(CCSR))
CCSR_DX_ls <- CCSR_DX_tidy %>%
group_by(CCSR) %>%
summarise(CCSR_DX = list(I10_DX))
names(CCSR_DX_ls$CCSR_DX) <- CCSR_DX_ls$CCSR
CCSR_DX_tidy
usethis::use_data(CCSR_DX_tidy, internal = T)
usethis::use_data(CCSR_DX_tidy, internal = T, overwrite = T)
use_data_raw("pr_class")
library(devtools)
library(dplyr)
library(stringr)
library(usethis)
####--- PR class for ICD-10 ---####
## SOURCE URL
# https://www.hcup-us.ahrq.gov/toolssoftware/procedureicd10/procedure_icd10.jsp
data_url_10 <- "https://www.hcup-us.ahrq.gov/toolssoftware/procedureicd10/PClassR_v2022-2.zip"
d <- tempdir()
archive::archive_extract(data_url_10,
dir  = d,
files = "PClassR_v2022-2.csv")
proc_class_icd10 <- readr::read_csv(file = glue::glue("{d}/PClassR_v2022-2.csv"), skip = 2,
col_names = c("I10_PR", "I10_PR_desc", "proc_class_num", "proc_class")) %>%
mutate(I10_PR = str_remove_all(I10_PR, "\\'")) %>%
select(-proc_class_num)
####--- PR class for ICD-10 ---####
## SOURCE URL
# https://www.hcup-us.ahrq.gov/toolssoftware/procedure/procedure.jsp
data_url_9 <- "https://www.hcup-us.ahrq.gov/toolssoftware/procedure/pc2015.csv"
# Read the data a recode SAS variables to char
proc_class_icd9 <- readr::read_csv(data_url_9,
skip      = 3,
col_types = "ccc",
col_names = c("I9_PR", "I9_PR_desc", "proc_class")) %>%
mutate(across(everything(), str_remove_all, "\\'"),
proc_class = recode(proc_class,
"3" = "Major Diagnostic",
"4" = "Major Therapeutic",
"1" = "Minor Diagnostic",
"2" = "Minor Therapeutic"))
unlink(d) # remove temp directory
rm(d)
####   WRITE TO FILE   ####
####  ~ Write to CSV   ####
proc_class_icd10 %>% readr::write_csv("data-raw/pr_class/proc_class_icd10.csv")
proc_class_icd9  %>% readr::write_csv("data-raw/pr_class/proc_class_icd9.csv")
rm(proc_class_icd9, proc_class_icd10)
read_csv("data-raw/pr_class/proc_class_icd10.csv")
library(readr)
read_csv("data-raw/pr_class/proc_class_icd10.csv")
read_csv("data-raw/pr_class/proc_class_icd9.csv")
#### ~ Write to object ####
proc_class_icd10 <- read_csv("data-raw/pr_class/proc_class_icd10.csv", col_types = "ccc")
proc_class_icd9  <- read_csv("data-raw/pr_class/proc_class_icd9.csv", col_types = "ccc")
usethis::use_data(proc_class_icd10, overwrite = TRUE)
usethis::use_data(proc_class_icd9, overwrite = TRUE)
rm(proc_class_icd9, proc_class_icd10)
####    ~ Metadata     ####
# Update metadata
metadata <- jsonlite::read_json("data-raw/metadata.json", simplifyVector = T)
metadata[["proc_class"]] <- list(
proc_class_icd10 = list(
# help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/procedureicd10/procedure_icd10.jsp",
data_url = data_url_10,
# version  = "Procedure Classes Refined for ICD-10-PCS v2022.2"
),
proc_class_icd9 = list(
# help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/procedure/procedure.jsp",
data_url = data_url_9,
# version  = "2015 version"
),
download_date = Sys.Date()
)
####    ~ Metadata     ####
# Update metadata
metadata <- jsonlite::read_json("data-raw/metadata.json", simplifyVector = T)
metadata[["proc_class"]] <- list(
proc_class_icd10 = list(
help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/procedureicd10/procedure_icd10.jsp",
data_url = data_url_10,
version  = "Procedure Classes Refined for ICD-10-PCS v2022.2"
),
proc_class_icd9 = list(
help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/procedure/procedure.jsp",
data_url = data_url_9,
version  = "2015 version"
),
download_date = Sys.Date()
)
View(metadata)
metadata %>% jsonlite::write_json("data-raw/metadata.json")
rm(metadata, data_url_9, data_url_10)
load_all()
check()
use_r("datasets")
check()
usethis::use_readme_rmd()
devtools::build_readme()
list.files()
data()
ls("package:hcup.data")
library(hcup.data)
data()
data(package=hcup.data)
data(package="hcup.data")
data9
data()
data(package="hcup.data")
data
"hcup.data"["hcup.data" %in% c("base", "stats")
"hcup.data"["hcup.data" %in% c("base", "stats")]
x <- data(package="hcup.data")
x
View(x)
x[["results"]]
x[["results"]][["items"]]
x[["results"]][[,1]]
x[["results"]][,1]
x[["results"]][,3]
x[["results"]][,4]
data.frame(
data = x[["results"]][,3],
desc = x[["results"]][,4]
)
# Referance URL: https://www.hcup-us.ahrq.gov/toolssoftware/ccs/ccs.jsp
library(dplyr)
library(tidyr)
# library(purrr)
library(stringr)
library(readr)
library(usethis)
#### READ FILES ####
data_url_single <- "https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip"
data_url_multi  <- "https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip"
# Read the zip file and extract files
d <- tempdir()
# Read the files
archive::archive_extract(data_url_single,
dir  = d,
files = c("dxlabel 2015.csv", "$dxref 2015.csv",
"prlabel 2014.csv", "$prref 2015.csv"))
archive::archive_extract(data_url_multi,
dir  = d,
files = c("ccs_multi_dx_tool_2015.csv", "dxmlabel-13.csv",
"ccs_multi_pr_tool_2015.csv", "prmlabel-09.csv"))
####    ICD-9 DX    ####
#### ~ Join icd9 dx ####
i9_single_dx <- readr::read_csv(file = glue::glue("{d}/$dxref 2015.csv"), skip = 2,
col_types = "cccccc",
col_names = c("I9_DX",
"CCS", "CCS_desc",
"I9_DX_desc",
"optCCS", "optCCS_desc")) %>%
select(-optCCS, -optCCS_desc) %>%
# Remove the quotes
mutate(CCS_desc = str_remove_all(CCS_desc, "\\'"),
CCS_desc = str_trim(CCS_desc),
CCS = str_remove_all(CCS, "\\'"),
CCS = str_trim(CCS),
CCS = str_glue("DX{CCS}"),
CCS = as.character(CCS),
I9_DX = str_remove_all(I9_DX, "\\'"),
I9_DX = str_trim(I9_DX)) %>%
# Fix issue with one label being wrong
mutate(CCS_desc = recode(CCS_desc, "Septicemia (except in labor)"="Septicemia"))
i9_multi_dx <- readr::read_csv(file = glue::glue("{d}/ccs_multi_dx_tool_2015.csv"),
skip = 1,
col_types = "ccccccccc",
col_names = c("I9_DX",
"CCS_lvl1_code", "CCS_lvl1_desc",
"CCS_lvl2_code", "CCS_lvl2_desc",
"CCS_lvl3_code", "CCS_lvl3_desc",
"CCS_lvl4_code", "CCS_lvl4_desc"))  %>%
# Remove the quotes
mutate(across(matches("CCS_lvl._code"), str_remove_all, "\\'"),
across(matches("CCS_lvl._code"), str_trim),
across(matches("CCS_lvl._code"), na_if, ""),
across(matches("CCS_lvl._code"), ~ifelse(!is.na(.x), paste0("DX-", .x), .x)),
across(matches("CCS_lvl._code"), as.character),
I9_DX = str_remove_all(I9_DX, "\\'"),
I9_DX = str_trim(I9_DX))
# Join these together to mimick the format of CCS for ICD-10
df_i9_dx <- left_join(i9_single_dx, i9_multi_dx, by="I9_DX")
df_i9_dx
# Join these together to mimick the format of CCS for ICD-10
df_i9_dx <- left_join(i9_single_dx, i9_multi_dx, by="I9_DX") %>%
filter(I9_DX!="")
df_i9_dx
rm(i9_single_dx, i9_multi_dx)
#### ~ Seperate icd9 dx ####
CCS_dx9_map <- df_i9_dx %>%
select(-ends_with("_desc")) %>%
rename_with(~str_remove(.x, "_code"))
# Take all of the descriptions and make a tidy df
# with thier CCS categories
CCS_dx9_label <- df_i9_dx %>%
rename(CCS_main_code=CCS, CCS_main_desc=CCS_desc) %>%
select(-I9_DX, -I9_DX_desc) %>%
pivot_longer(everything(),
names_to      = c("level", ".value"),
names_pattern = "CCS_(....)_(....)") %>%
select(CCS=code, CCS_label=desc, CCS_Level=level) %>%
filter(!is.na(CCS)) %>%
mutate(CCS_label = recode(CCS_label, "Mental Illness"="Mental illness",
"Miscellaneous mental health disorders [670]"="Miscellaneous mental disorders [670]")) %>%
unique()
####    ICD-9 PR    ####
#### ~ Join icd9 pr ####
i9_single_pr <- readr::read_csv(file = glue::glue("{d}/$prref 2015.csv"), skip = 2,
col_types = "cccc",
col_names = c("I9_PR", "CCS", "CCS_desc",
"I9_PR_desc")) %>%
# Remove the quotes
mutate(CCS_desc = str_remove_all(CCS_desc, "\\'"),
CCS_desc = str_trim(CCS_desc),
CCS = str_remove_all(CCS, "\\'"),
CCS = str_trim(CCS),
CCS = str_glue("PR{CCS}"),
CCS = as.character(CCS),
I9_PR = str_remove_all(I9_PR, "\\'"),
I9_PR = str_trim(I9_PR))
i9_multi_pr <- readr::read_csv(file = glue::glue("{d}/ccs_multi_pr_tool_2015.csv"),
skip = 1,
col_types = "ccccccc",
col_names = c("I9_PR",
"CCS_lvl1_code", "CCS_lvl1_desc",
"CCS_lvl2_code", "CCS_lvl2_desc",
"CCS_lvl3_code", "CCS_lvl3_desc")) %>%
# Remove the quotes
mutate(across(matches("CCS_lvl._code"), str_remove_all, "\\'"),
across(matches("CCS_lvl._code"), str_trim),
across(matches("CCS_lvl._code"), na_if, ""),
across(matches("CCS_lvl._code"), ~ifelse(!is.na(.x), paste0("PR-", .x), .x)),
across(matches("CCS_lvl._code"), as.character),
I9_PR = str_remove_all(I9_PR, "\\'"),
I9_PR = str_trim(I9_PR))
# Join these together to mimick the format of CCS for ICD-10
df_i9_pr <- left_join(i9_single_pr, i9_multi_pr, by="I9_PR") %>%
filter(I9_PR!="")
rm(i9_single_pr, i9_multi_pr)
#### ~ Seperate icd9 pr ####
CCS_pr9_map <- df_i9_pr %>%
select(-ends_with("_desc")) %>%
rename_with(~str_remove(.x, "_code"))
# Take all of the descriptions and make a tidy df
# with thier CCS categories
CCS_pr9_label <- df_i9_pr %>%
rename(CCS_main_code=CCS, CCS_main_desc=CCS_desc) %>%
select(-I9_PR, -I9_PR_desc) %>%
pivot_longer(everything(),
names_to      = c("level", ".value"),
names_pattern = "CCS_(....)_(....)") %>%
select(CCS=code, CCS_label=desc, CCS_Level=level) %>%
filter(!is.na(CCS)) %>%
unique()
CCS_dx9_map
CCS_dx9_label
CCS_pr9_map
CCS_pr9_label
readr::write_csv(CCS_dx9_map,   "data-raw/CCS/CCS_dx9_map.csv")
readr::write_csv(CCS_dx9_label, "data-raw/CCS/CCS_dx9_label.csv")
readr::write_csv(CCS_pr9_map,   "data-raw/CCS/CCS_pr9_map.csv")
readr::write_csv(CCS_pr9_label, "data-raw/CCS/CCS_pr9_label.csv")
rm(CCS_dx9_map, CCS_dx9_label, df_i9_dx,
CCS_pr9_map, CCS_pr9_label, df_i9_pr)
#### ~ Write to object ####
CCS_dx9_map   <- readr::read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types ="cccccc")
CCS_dx9_label <- readr::read_csv("data-raw/CCS/CCS_dx9_label.csv", col_types="ccc")
CCS_pr9_map   <- readr::read_csv("data-raw/CCS/CCS_pr9_map.csv", col_types="ccccc")
CCS_pr9_label <- readr::read_csv("data-raw/CCS/CCS_pr9_label.csv", col_types="ccc")
usethis::use_data(CCS_dx9_map, overwrite = T)
usethis::use_data(CCS_dx9_label, overwrite = T)
usethis::use_data(CCS_pr9_map, overwrite = T)
usethis::use_data(CCS_pr9_label, overwrite = T)
rm(CCS_dx9_map, CCS_dx9_label,
CCS_pr9_map, CCS_pr9_label)
####    ~ Metadata     ####
# Update metadata
metadata <- jsonlite::read_json("data-raw/metadata.json", simplifyVector = T)
metadata[["CCS_icd9"]] <- list(
CCS_dx9 = list(
help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/ccs/ccs.jsp",
data_url = list(single = data_url_single, multi = data_url_multi),
version  = "2015 version"
),
CCS_pr9 = list(
help_url = "https://www.hcup-us.ahrq.gov/toolssoftware/ccs/ccs.jsp",
data_url = list(single = data_url_single, multi = data_url_multi),
version  = "2015 version"
),
download_date = Sys.Date()
)
metadata %>% jsonlite::write_json("data-raw/metadata.json")
unlink(d) # remove temp directory
rm(metadata, d, data_url_single, data_url_multi)
library(devtools)
use_data_raw("CCS_labels")
library(dplyr)
library(readr)
library(stringr)
CCS_dx9_label <- readr::read_csv("data-raw/CCS/CCS_dx9_label.csv", col_types="ccc")
CCS_pr9_label <- readr::read_csv("data-raw/CCS/CCS_pr9_label.csv", col_types="ccc")
CCS_dx10_label <- read_csv("data-raw/CCS/CCS_dx10_label.csv", col_types = "ccc")
CCS_pr10_label <- read_csv("data-raw/CCS/CCS_pr10_label.csv", col_types = "ccc")
bind_rows(CCS_dx9_label, CCS_pr9_label, CCS_dx10_label, CCS_pr10_label)
left_join(CCS_dx9_label, CCS_dx10_label, by=c("CCS", "CCS_Level"))
left_join(CCS_dx9_label, CCS_dx10_label, by=c("CCS", "CCS_Level"), suffix = c(".9", ".10"))
left_join(CCS_dx9_label, CCS_dx10_label, by=c("CCS", "CCS_Level"), suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10))
CCS_dx9_label
left_join(CCS_dx9_label, CCS_dx10_label, by=c("CCS", "CCS_Level"), suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10))
left_join(CCS_dx9_label, CCS_dx10_label, by=c("CCS", "CCS_Level"), suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10)) %>%
select(CCS, CCS_label, CCS_Level)
left_join(CCS_pr9_label, CCS_pr10_label, by=c("CCS", "CCS_Level"), suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10)) %>%
select(CCS, CCS_label, CCS_Level)
CCS_dx <- left_join(CCS_dx9_label, CCS_dx10_label,
by=c("CCS", "CCS_Level"),
suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10)) %>%
select(CCS, CCS_label, CCS_Level)
CCS_pr <- left_join(CCS_pr9_label, CCS_pr10_label,
by=c("CCS", "CCS_Level"),
suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10)) %>%
select(CCS, CCS_label, CCS_Level)
CCS_labels <- bind_rows(CCS_dx, CCS_pr)
usethis::use_data(CCS_labels, overwrite = TRUE)
check()
install()
library(devtools)
uninstall()
options("install.lock"=FALSE)
library(devtools)
check()
## code to prepare `CCS_labels` dataset goes here
# This combines the various CCS labels into one file
# Should be noted that the categories are consistent across ICD-9 and ICD-10
# (after applying the changes in syntax that I made), but the text descriptions
# do differ slightly. The ICD-10 version provides more details, so I use that version
# where possible
library(dplyr)
library(readr)
library(stringr)
CCS_dx9_label  <- readr::read_csv("data-raw/CCS/CCS_dx9_label.csv", col_types="ccc")
CCS_pr9_label  <- readr::read_csv("data-raw/CCS/CCS_pr9_label.csv", col_types="ccc")
CCS_dx10_label <- read_csv("data-raw/CCS/CCS_dx10_label.csv", col_types = "ccc")
CCS_pr10_label <- read_csv("data-raw/CCS/CCS_pr10_label.csv", col_types = "ccc")
CCS_dx <- left_join(CCS_dx9_label, CCS_dx10_label,
by=c("CCS", "CCS_Level"),
suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10)) %>%
select(CCS, CCS_label, CCS_Level)
CCS_pr <- left_join(CCS_pr9_label, CCS_pr10_label,
by=c("CCS", "CCS_Level"),
suffix = c(".9", ".10")) %>%
mutate(CCS_label = ifelse(is.na(CCS_label.10), CCS_label.9, CCS_label.10)) %>%
select(CCS, CCS_label, CCS_Level)
View(CCS_pr)
View(CCS_pr9_label)
CCS_labels <- bind_rows(CCS_dx, CCS_pr) %>% unique()
usethis::use_data(CCS_labels, overwrite = TRUE)
hcup.data:::CCSR_DX_tidy
library(hcup)
remotes::install_github("Hunterratliff1/hcup")
remotes::install_github("Hunterratliff1/hcup")
library(devtools)
use_data_raw("CCSR_labels")
library(dplyr)
library(readr)
library(stringr)
readr::read_csv("data-raw/CCSR/CCSR_DX_categories.csv")
readr::read_csv("data-raw/CCSR/CCSR_DX_categories.csv", col_types="cccc")
readr::read_csv("data-raw/CCSR/CCSR_PR_categories.csv")
readr::read_csv("data-raw/CCSR/CCSR_PR_categories.csv", col_types="ccccccc")
readr::read_csv("data-raw/CCSR/CCSR_DX_categories.csv", col_types="cccc") %>%
select(CCSR, CCSR_desc)
readr::read_csv("data-raw/CCSR/CCSR_PR_categories.csv", col_types="ccccccc") %>%
select(CCSR, CCSR_desc) %>%
mutate(vers = "pr10")
?hcup.data::CCS_labels
CCSR_labs_dx <- readr::read_csv("data-raw/CCSR/CCSR_DX_categories.csv", col_types="cccc") %>%
select(CCSR, CCSR_desc) %>%
mutate(vers = "dx10")
CCSR_labs_pr <- readr::read_csv("data-raw/CCSR/CCSR_PR_categories.csv", col_types="ccccccc") %>%
select(CCSR, CCSR_desc) %>%
mutate(vers = "pr10")
CCSR_labels <- dplyr::bind_rows(CCSR_labs_dx, CCSR_labs_pr)
usethis::use_data(CCSR_labels, overwrite = TRUE)
check()
document()
?CCSR_labels
document()
?CCSR_labels
library(devtools)
use_package_doc()
check()
library(devtools)
use_data_raw("valid_codes")
# This assumes you've already made all of the datasets
library(dplyr)
library(readr)
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = "c")
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = "c", col_names = "code")
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = "csssss")
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = cols_only("c"))
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = cols_only(code=col_character()))
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv")
I9_DX = col_character())
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = "cccccc")
pr9 <- read_csv("data-raw/CCS/CCS_pr9_map.csv", col_types = "ccccc")
dx10 <- read_csv("data-raw/CCSR/CCSR_DX_mapping.csv", col_types = "cccccccccc")
read_csv("data-raw/CCSR/CCSR_PR_mapping.csv")
pr10 <- read_csv("data-raw/CCSR/CCSR_PR_mapping.csv", col_types = "cccc")
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = "cccccc")
pr9 <- read_csv("data-raw/CCS/CCS_pr9_map.csv", col_types = "ccccc")
dx10 <- read_csv("data-raw/CCSR/CCSR_DX_mapping.csv", col_types = "cccccccccc")
pr10 <- read_csv("data-raw/CCSR/CCSR_PR_mapping.csv", col_types = "cccc")
dx9 <- read_csv("data-raw/CCS/CCS_dx9_map.csv", col_types = "cccccc")[["I9_DX"]]
pr9 <- read_csv("data-raw/CCS/CCS_pr9_map.csv", col_types = "ccccc")[["I9_PR"]]
dx10 <- read_csv("data-raw/CCSR/CCSR_DX_mapping.csv", col_types = "cccccccccc")[["I10_DX"]]
pr10 <- read_csv("data-raw/CCSR/CCSR_PR_mapping.csv", col_types = "cccc")[["I10_PR"]]
valid_codes <- list(
dx9  = dx9,
pr9  = pr9,
dx10 = dx10,
pr10 = pr10
)
usethis::use_data(valid_codes, overwrite = TRUE)
check()
?valid_codes
document()
?valid_codes
load_all()
valid_codes
